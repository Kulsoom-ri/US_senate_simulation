# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ii_Iz_J0pDhC0SGKKFYkY5iTTqq_8pwj
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Excel file
file_path = "senators_data.xlsx"
xls = pd.ExcelFile(file_path)

# Display sheet names to identify the correct sheet
xls.sheet_names

# Load the senators_data sheet
df = xls.parse("senators_data")

# Add education_category to the list of categories
categories = ["race", "religion", "sex", "party", "education_category"]

# Set up the FacetGrid with 2x3 layout
fig, axes = plt.subplots(2, 3, figsize=(15, 10))  # 2 rows, 3 columns
axes = axes.flatten()  # Flatten to easily iterate

# Generate count plots for each category
for i, category in enumerate(categories):
    order = df[category].value_counts().index  # Get correct order for each category
    sns.countplot(y=df[category], order=order, palette="mako", ax=axes[i])
    axes[i].set_title(category.replace("_", " ").capitalize())
    axes[i].set_xlabel("Count of Senators")
    axes[i].set_ylabel(category.replace("_", " ").capitalize())

# Remove any unused subplots if the number of categories is less than grid size
for i in range(len(categories), len(axes)):
    fig.delaxes(axes[i])

# Adjust layout for better spacing
plt.tight_layout()
plt.show()

# Distributions of Age, Years in Senate, DW-Nominate, and State PVI

# Set up the first FacetGrid for Age, Years in Senate, DW-Nominate, and State PVI
fig, axes = plt.subplots(2, 2, figsize=(12, 10))  # 2x2 grid
axes = axes.flatten()

# Define continuous variables for distribution plots
continuous_vars = ["age", "years_senate", "dw_nominate", "state_pvi"]
titles = ["Age Distribution", "Years in Senate", "DW-Nominate Score", "State PVI"]

# Plot histograms for each variable
for i, var in enumerate(continuous_vars):
    sns.histplot(df[var], bins=20, kde=True, color="blue", ax=axes[i])
    axes[i].set_title(titles[i])
    axes[i].set_xlabel(var.replace("_", " ").capitalize())
    axes[i].set_ylabel("Count of Senators")

# Adjust layout
plt.tight_layout()
plt.show()

# Calculate Party Loyalty as (AllVoteW / TotalAll)
df["party_loyalty"] = df["AllVoteW"] / df["TotalAll"]

# Set up the second FacetGrid for PSO, Bipartisan Index, and Party Loyalty
fig, axes = plt.subplots(1, 3, figsize=(15, 5))  # 1 row, 3 columns

# Define variables for the second set of distributions
variables = ["Presidential Opposition (PSO)", "bipartisan_index", "party_loyalty"]
titles = ["Presidential Opposition (PSO)", "Bipartisan Index", "Party Loyalty"]

# Plot histograms for each variable
for i, var in enumerate(variables):
    sns.histplot(df[var], bins=20, kde=True, color="green", ax=axes[i])
    axes[i].set_title(titles[i])
    axes[i].set_xlabel(var.replace("_", " ").capitalize())
    axes[i].set_ylabel("Count of Senators")

# Adjust layout
plt.tight_layout()
plt.show()

# Set up figure layout
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# Scatter Plot: Party Loyalty vs. Bipartisan Index with regression line
sns.regplot(x=df["party_loyalty"], y=df["bipartisan_index"], scatter=False, ax=axes[0],
            line_kws={"color": "black"}, ci=None)  # Only draw the regression line
sns.scatterplot(x=df["party_loyalty"], y=df["bipartisan_index"], hue=df["party"], palette="coolwarm", ax=axes[0], alpha=0.9)
axes[0].set_title("Party Loyalty vs. Bipartisan Index")
axes[0].set_xlabel("Party Loyalty (AllVoteW / TotalAll)")
axes[0].set_ylabel("Bipartisan Index")

# Scatter Plot: State PVI vs. DW-Nominate with regression line
sns.regplot(x=df["state_pvi"], y=df["dw_nominate"], scatter=False, ax=axes[1],
            line_kws={"color": "black"}, ci=None)  # Only draw the regression line
sns.scatterplot(x=df["state_pvi"], y=df["dw_nominate"], hue=df["party"], palette="coolwarm", ax=axes[1], alpha=0.9)
axes[1].set_title("State PVI vs. DW-Nominate")
axes[1].set_xlabel("State Partisan Voting Index (PVI)")
axes[1].set_ylabel("DW-Nominate Score")

# Adjust layout
plt.tight_layout()
plt.show()

# Load the 'bills_data' sheet
bills_df = pd.read_excel(xls, sheet_name="bills_data")

# Group vote types starting with "On Overriding the Veto" together
bills_df["type_vote"] = bills_df["type_vote"].apply(
    lambda x: "On Overriding the Veto" if "On Overriding the Veto" in x else x
)

# Group vote types containing "Motion to Discharge" together
bills_df["type_vote"] = bills_df["type_vote"].apply(
    lambda x: "Motion to Discharge" if "Motion to discharge" in x else x
)

# Define session dates
session_1_start = pd.Timestamp("2023-01-03")
session_1_end = pd.Timestamp("2024-01-03")

# Count votes in Session 1
session_1_votes = bills_df[(bills_df["vote_date"] >= session_1_start) & (bills_df["vote_date"] <= session_1_end)].shape[0]
session_2_votes = bills_df.shape[0] - session_1_votes  # Remaining votes

# Count passed vs rejected bills
passed_count = (bills_df["vote_result"] == "passed").sum()
rejected_count = (bills_df["vote_result"] == "rejected").sum()

# Count unique vote types and identify key votes
vote_type_counts = bills_df["type_vote"].value_counts()
num_vote_types = vote_type_counts.shape[0]
key_votes = 13  # Provided by the user

# Distribution of topics
topic_distribution = bills_df["topic"].value_counts()

# Distribution of introduced_party
party_distribution = bills_df["introduced_party"].value_counts()

# Count bills with close votes (gap ≤ 5) vs. large gaps
bills_df["vote_gap"] = abs(bills_df["yea"] - bills_df["nay"])
close_votes = (bills_df["vote_gap"] <= 5).sum()
far_votes = (bills_df["vote_gap"] > 5).sum()

# Set style
sns.set_style("whitegrid")

# Create subplots with all bars horizontal
fig, axes = plt.subplots(3, 2, figsize=(14, 12))

# 1. Votes per session (horizontal)
sns.barplot(y=["Session 1", "Session 2"], x=[session_1_votes, session_2_votes], ax=axes[0, 0], orient="h", palette="PRGn")
axes[0, 0].set_title("Votes in Each Session")
axes[0, 0].set_xlabel("Number of Votes")

# 2. Passed vs Rejected (horizontal)
sns.barplot(y=["Passed", "Rejected"], x=[passed_count, rejected_count], ax=axes[0, 1], orient="h", palette="coolwarm")
axes[0, 1].set_title("Vote Results")
axes[0, 1].set_xlabel("Number of Bills")

# 3. Vote types (Grouped, horizontal)
vote_type_counts.sort_values().plot(kind="barh", ax=axes[1, 0], color="skyblue")
axes[1, 0].axvline(x=key_votes, color="red", linestyle="--", label="Key Votes (13)")
axes[1, 0].set_title("Distribution of Vote Types")
axes[1, 0].legend()

# 4. Distribution of topics (horizontal)
topic_distribution.sort_values().plot(kind="barh", ax=axes[1, 1], color="green")
axes[1, 1].set_title("Distribution of Bill Topics")

# 5. Introduced party distribution (horizontal)
sns.barplot(y=party_distribution.index, x=party_distribution.values, ax=axes[2, 0], palette="coolwarm", orient="h")
axes[2, 0].set_title("Bills Introduced by Party")
axes[2, 0].set_xlabel("Number of Bills")

# 6. Close votes vs Large gaps (horizontal)
sns.barplot(y=["Close Votes (≤5 gap)", "Large Gap (>5)"], x=[close_votes, far_votes], ax=axes[2, 1], orient="h", palette="Spectral")
axes[2, 1].set_title("Vote Margin")
axes[2, 1].set_xlabel("Number of Bills")

plt.tight_layout()
plt.show()